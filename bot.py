import json, os, datetime, requests

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TOKEN = os.getenv("TELEGRAM_TOKEN")  # —Ç–æ–∫–µ–Ω –±–µ—Ä—ë–º –¢–û–õ–¨–ö–û –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è
API = f"https://api.telegram.org/bot{TOKEN}" if TOKEN else None

MODE = os.getenv("MODE", "test")  # register / normal / test / debug

STATE_FILE = "state.json"
PEOPLE_FILE = "people.json"
HISTORY_FILE = "history.json"

# --- –•–µ–ª–ø–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ ---
def load_json(name, default):
    try:
        with open(name, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return default

def save_json(name, data):
    with open(name, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# --- Telegram API ---
def _tg_call(method, payload):
    if not TOKEN:
        # –æ—Ñ—Ñ–ª–∞–π–Ω/–ª–æ–∫–∞–ª—å–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        print(f"[TG/{method}] {json.dumps(payload, ensure_ascii=False)}")
        # —ç–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å message_id
        if method in ("sendMessage",):
            return {"message_id": 1}
        return None
    url = f"{API}/{method}"
    resp = requests.post(url, json=payload, timeout=30)
    try:
        data = resp.json()
    except Exception:
        raise RuntimeError(f"Telegram API error: status={resp.status_code} body={resp.text[:200]}")
    if not data.get("ok"):
        raise RuntimeError(f"Telegram API error: {data}")
    return data.get("result")

def send_message(chat_id, text, disable_notification=False):
    return _tg_call("sendMessage", {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML",
        "disable_notification": disable_notification
    })

def edit_message(chat_id, message_id, text):
    try:
        return _tg_call("editMessageText", {
            "chat_id": chat_id,
            "message_id": message_id,
            "text": text,
            "parse_mode": "HTML",
        })
    except Exception as e:
        print(f"[WARN] edit failed: {e}")
        return None

def delete_message(chat_id, message_id):
    try:
        return _tg_call("deleteMessage", {"chat_id": chat_id, "message_id": message_id})
    except Exception as e:
        print(f"[WARN] delete failed: {e}")
        return None

# --- –î–∞–Ω–Ω—ã–µ ---
people_data = load_json(PEOPLE_FILE, {"start_date": str(datetime.date.today()), "people": []})
people = people_data.get("people", [])
state = load_json(STATE_FILE, {"last_day": None})
history = load_json(HISTORY_FILE, [])

today_date = datetime.date.today()
today = today_date.isoformat()

def rotation_index(start_date_iso, people_len, on_date):
    if people_len == 0:
        return None
    start = datetime.date.fromisoformat(start_date_iso)
    return (on_date - start).days % people_len

def build_summary(people, idx):
    if not people:
        return "–°–≤–æ–¥–∫–∞: –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É: –º—É—Å–æ—Ä –º–æ–π"
    n = len(people)
    i_today = idx
    i_yest = (idx - 1) % n
    i_tom = (idx + 1) % n
    def fmt(p):
        tg = p.get("tg") or ""
        return f"{p.get('name','?')} {tg}".strip()
    return (
        f"üóì –î–∞—Ç–∞: {today}\n"
        f"üßπ –°–µ–≥–æ–¥–Ω—è –≤—ã–Ω–æ—Å–∏—Ç: {fmt(people[i_today])}\n"
        f"üìÖ –í—á–µ—Ä–∞: {fmt(people[i_yest])}\n"
        f"üìÜ –ó–∞–≤—Ç—Ä–∞: {fmt(people[i_tom])}"
    )

def reset_new_day(recipients):
    # –ü–µ—Ä-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å–±—Ä–æ—Å: –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–∏ —Å–º–µ—à–∞–Ω–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ä–µ–∂–∏–º–æ–≤ (test‚Üínormal)
    for u in recipients:
        key = str(u["chat_id"])
        s = state.get(key, {})
        if s.get("last_day") == today:
            state[key] = s
            continue
        pmid = s.get("ping_message_id")
        if pmid:
            delete_message(u["chat_id"], pmid)
        s["ping_message_id"] = None
        s["ping_count"] = 0
        s["last_day"] = today
        state[key] = s

def ensure_info(recipient_chat_id, text):
    key = str(recipient_chat_id)
    s = state.get(key, {})
    mid = s.get("info_message_id")
    if mid:
        if not edit_message(recipient_chat_id, mid, text):
            msg = send_message(recipient_chat_id, text, disable_notification=True)
            if msg and "message_id" in msg:
                s["info_message_id"] = msg["message_id"]
    else:
        msg = send_message(recipient_chat_id, text, disable_notification=True)
        if msg and "message_id" in msg:
            s["info_message_id"] = msg["message_id"]
    state[key] = s

def send_or_replace_ping(recipient_chat_id, text):
    key = str(recipient_chat_id)
    s = state.get(key, {})
    pmid = s.get("ping_message_id")
    if pmid:
        delete_message(recipient_chat_id, pmid)
    msg = send_message(recipient_chat_id, text)
    if msg and "message_id" in msg:
        s["ping_message_id"] = msg["message_id"]
    s["ping_count"] = int(s.get("ping_count", 0)) + 1
    state[key] = s

# --- –†–µ–∂–∏–º—ã ---

def run_register_mode():
    print("=== Register mode ===")
    print("–ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω long-poll getUpdates. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ people.json.")


def run_normal_mode():
    print("=== Normal mode ===")
    if not people:
        print("–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return
    idx = rotation_index(people_data["start_date"], len(people), today_date)
    summary = build_summary(people, idx)
    user_today = people[idx]

    recipients = people  # –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º
    reset_new_day(recipients)
    # –ò–Ω—Ñ–æ –∫–∞–∂–¥–æ–º—É (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ)
    for u in recipients:
        ensure_info(u["chat_id"], summary)
    # –ü–∏–Ω–≥ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É
    ping_text = f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–µ–≥–æ–¥–Ω—è –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –≤—ã–Ω–µ—Å—Ç–∏ –º—É—Å–æ—Ä."
    send_or_replace_ping(user_today["chat_id"], ping_text)


def run_test_mode():
    print("=== Test mode ===")
    testers = [p for p in people if p.get("tester")]
    if not testers:
        print("–ù–µ—Ç —Ç–µ—Å—Ç–µ—Ä–æ–≤ (people[*].tester = true)")
        return
    if not people:
        print("–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return
    idx = rotation_index(people_data["start_date"], len(people), today_date)
    summary = build_summary(people, idx)
    user_today = people[idx]

    recipients = testers  # –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–µ—Ä–∞–º
    reset_new_day(recipients)

    # –ò–Ω—Ñ–æ: –æ–¥–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ö–ê–ñ–î–û–ú–£ —Ç–µ—Å—Ç–µ—Ä—É —Å –ø–æ–º–µ—Ç–∫–æ–π –∫–æ–º—É –±—ã –ø–æ—à–ª–æ
    info_text = (
        "[TEST] –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Å–≤–æ–¥–∫–∞. –í –±–æ—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É.\n\n" + summary
    )
    for t in testers:
        ensure_info(t["chat_id"], info_text)

    # –ü–∏–Ω–≥: –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ö–ê–ñ–î–û–ú–£ —Ç–µ—Å—Ç–µ—Ä—É —Å —è–≤–Ω–æ–π –ø–æ–º–µ—Ç–∫–æ–π –∞–¥—Ä–µ—Å–∞—Ç–∞
    intended = f"{user_today.get('name')} {user_today.get('tg','')} (chat_id={user_today.get('chat_id')})"
    ping_text = (
        f"[TEST] –ò–º–∏—Ç–∞—Ü–∏—è –ø–∏–Ω–≥–∞ –¥–ª—è: {intended}\n"
        f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–µ–≥–æ–¥–Ω—è –æ—á–µ—Ä–µ–¥—å –≤—ã–Ω–µ—Å—Ç–∏ –º—É—Å–æ—Ä."
    )
    for t in testers:
        send_or_replace_ping(t["chat_id"], ping_text)


def run_debug_mode():
    print("=== Debug mode (admin panel) ===")
    print(json.dumps(state, ensure_ascii=False, indent=2))


if MODE == "register":
    run_register_mode()
elif MODE == "normal":
    run_normal_mode()
elif MODE == "test":
    run_test_mode()
elif MODE == "debug":
    run_debug_mode()
else:
    print("‚ùå Unknown MODE")

save_json(STATE_FILE, state)
save_json(HISTORY_FILE, history)
print("‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")
