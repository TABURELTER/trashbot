import json, os, datetime, requests, subprocess

TOKEN = os.getenv("TELEGRAM_TOKEN")
API = f"https://api.telegram.org/bot{TOKEN}"
MODE = os.getenv("MODE", "normal")  # "normal", "register", "test"

def load_json(name, default):
    try:
        with open(name, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return default

def save_json(name, data):
    with open(name, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def send_message(chat_id, text, reply_markup=None):
    requests.post(f"{API}/sendMessage", json={
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "Markdown",
        "reply_markup": reply_markup
    })

def get_updates():
    return requests.get(f"{API}/getUpdates").json().get("result", [])

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
people_data = load_json("people.json", {"start_date": str(datetime.date.today()), "people": []})
state = load_json("state.json", {"done_date": None})
history = load_json("history.json", [])

# === –†–ï–ñ–ò–ú –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ===
if MODE == "register":
    updates = get_updates()
    added = []
    for u in updates:
        msg = u.get("message")
        if not msg: continue
        text = msg.get("text", "").lower().strip()
        if text == "–º—É—Å–æ—Ä –º–æ–π":
            chat_id = msg["chat"]["id"]
            name = msg["from"].get("first_name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
            username = msg["from"].get("username", "")
            if not any(p["chat_id"] == chat_id for p in people_data["people"]):
                people_data["people"].append({
                    "name": name,
                    "tg": f"@{username}" if username else name,
                    "chat_id": chat_id
                })
                added.append(name)
                send_message(chat_id, "‚úÖ –¢—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –º—É—Å–æ—Ä–∞!")

    if added:
        save_json("people.json", people_data)
        # === –ê–≤—Ç–æ–ø—É—à –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ===
        subprocess.run(["git", "config", "--global", "user.email", "action@github.com"])
        subprocess.run(["git", "config", "--global", "user.name", "GitHub Action"])
        subprocess.run(["git", "add", "people.json"])
        subprocess.run(["git", "commit", "-m", f"–î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {', '.join(added)}"])
        subprocess.run(["git", "push", "origin", "main"])
        print(f"–î–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {', '.join(added)}")
    else:
        print("–ù–æ–≤—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –Ω–µ—Ç.")
    exit(0)

# === –ù–û–†–ú–ê–õ–¨–ù–´–ô –†–ï–ñ–ò–ú ===
people = people_data.get("people", [])
if not people:
    print("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    exit(0)

today = datetime.date.today()
start_date = datetime.date.fromisoformat(people_data["start_date"])
days_passed = (today - start_date).days
index_today = days_passed % len(people)

today_p = people[index_today]
yesterday_p = people[(index_today - 1) % len(people)]
tomorrow_p = people[(index_today + 1) % len(people)]

keyboard = {"inline_keyboard": [[{"text": "üóë –í—ã–∫–∏–Ω—É–ª", "callback_data": "done"}]]}

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ callback –∫–Ω–æ–ø–æ–∫ ===
updates = get_updates()
for u in updates:
    if "callback_query" in u:
        cb = u["callback_query"]
        if cb["data"] == "done":
            state["done_date"] = str(today)
            save_json("state.json", state)
            history.append({
                "date": str(today),
                "person": today_p["name"],
                "time": datetime.datetime.now().strftime("%H:%M")
            })
            save_json("history.json", history)
            requests.post(f"{API}/answerCallbackQuery", json={
                "callback_query_id": cb["id"],
                "text": "–ü—Ä–∏–Ω—è—Ç–æ üëç"
            })
            send_message(cb["from"]["id"], "–°–ø–∞—Å–∏–±–æ! –°–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –Ω–µ –Ω–∞–ø–æ–º–Ω—é üßπ")

# === –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ—á—å—é ===
hour = datetime.datetime.now().hour
if hour == 3:
    state["done_date"] = None
    save_json("state.json", state)

# === –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ ===
info_text = (
    f"üóì –°–µ–≥–æ–¥–Ω—è {today.strftime('%A, %d %B %Y')}\n\n"
    f"üßπ –°–µ–≥–æ–¥–Ω—è –≤—ã–Ω–æ—Å–∏—Ç: {today_p['name']}\n"
    f"üìÖ –í—á–µ—Ä–∞: {yesterday_p['name']}\n"
    f"üìÜ –ó–∞–≤—Ç—Ä–∞: {tomorrow_p['name']}\n"
)

# === –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (08:00 –∏ 20:00) ===
already_done = state.get("done_date") == str(today)
if not already_done and hour in [8, 20]:
    send_message(today_p["chat_id"], f"–ü—Ä–∏–≤–µ—Ç, {today_p['name']}! –°–µ–≥–æ–¥–Ω—è —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—å –≤—ã–Ω–æ—Å–∏—Ç—å –º—É—Å–æ—Ä üóë", reply_markup=keyboard)

# === –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º ===
for p in people:
    send_message(p["chat_id"], info_text)

# === –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ ===
if os.getenv("TEST_RUN") == "1":
    for p in people:
        send_message(p["chat_id"], "üîß –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ TrashBot –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ!")
